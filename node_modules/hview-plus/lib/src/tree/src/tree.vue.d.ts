declare const _sfc_main: import("vue").DefineComponent<{
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    children: {
        type: StringConstructor;
        default: string;
    };
    showCheckbox: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeKey: {
        type: StringConstructor;
        default: string;
    };
    defaultExpandedKeys: {
        type: ArrayConstructor;
        default: () => any[];
    };
    defaultCheckedKeys: {
        type: ArrayConstructor;
        default: () => any[];
    };
    defaultExpandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderContent: {
        type: FunctionConstructor;
    };
}, {
    props: any;
    emits: (event: "toggle-change" | "checked-change", ...args: any[]) => void;
    copyData: import("vue").Ref<any[]>;
    checkedKeys: import("vue").Ref<unknown[]>;
    initFn: (data: any) => void;
    checkboxChange: () => void;
    toggleChange: (val: any) => void;
    checkedChange: (data: any) => void;
    updateChecked: (data: any) => void;
    setCheckedKeys: (keys: any) => void;
    getCheckedKeys: () => any[];
    getCheckedNodes: () => Object[];
    treeNode: import("vue").DefineComponent<{
        items: {
            type: ObjectConstructor;
            default: () => void;
        };
        label: StringConstructor;
        children: StringConstructor;
        showCheckbox: BooleanConstructor;
        index: NumberConstructor;
        nodeKey: StringConstructor;
        defaultExpandedKeys: ArrayConstructor;
        defaultCheckedKeys: ArrayConstructor;
        defaultExpandAll: BooleanConstructor;
        renderContent: FunctionConstructor;
        parentData: ArrayConstructor;
    }, {
        props: any;
        checkboxChange: () => void;
        toggleChange: (param: any) => void;
        checkedChange: (param: any) => void;
        isShow: import("vue").ComputedRef<any>;
        nodeStyle: import("vue").ComputedRef<{
            "padding-left": string;
        }>;
        expandIconClass: import("vue").ComputedRef<(string | {
            expanded: any;
        })[]>;
        handleToggle: (item: any) => void;
        handleCheckChange: (val: any) => void;
        updateChildChecked: (item: any, val: any) => void;
        updateParentChecked: () => void;
        _initDefault: () => void;
        nodeContent: {
            props: {
                data: {
                    type: ObjectConstructor;
                    required: boolean;
                };
                renderContent: FunctionConstructor;
                parentData: ArrayConstructor;
            };
            setup(props: any): () => any[];
        };
        HCollapseTransition: import("vue").DefineComponent<{
            duration: {
                type: NumberConstructor;
                default: number;
            };
            animate: {
                type: StringConstructor;
                default: string;
            };
        }, {
            OnbeforeEnter: (el: HTMLDivElement) => void;
            Onenter: (el: HTMLDivElement) => void;
            OnafterEnter: (el: HTMLDivElement) => void;
            OnbeforeLeave: (el: HTMLDivElement) => void;
            Onleave: (el: HTMLDivElement) => void;
            OnafterLeave: (el: HTMLDivElement) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            duration: {
                type: NumberConstructor;
                default: number;
            };
            animate: {
                type: StringConstructor;
                default: string;
            };
        }>>, {
            duration: number;
            animate: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ObjectConstructor;
            default: () => void;
        };
        label: StringConstructor;
        children: StringConstructor;
        showCheckbox: BooleanConstructor;
        index: NumberConstructor;
        nodeKey: StringConstructor;
        defaultExpandedKeys: ArrayConstructor;
        defaultCheckedKeys: ArrayConstructor;
        defaultExpandAll: BooleanConstructor;
        renderContent: FunctionConstructor;
        parentData: ArrayConstructor;
    }>>, {
        items: Record<string, any>;
        showCheckbox: boolean;
        defaultExpandAll: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("toggle-change" | "checked-change")[], "toggle-change" | "checked-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    children: {
        type: StringConstructor;
        default: string;
    };
    showCheckbox: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeKey: {
        type: StringConstructor;
        default: string;
    };
    defaultExpandedKeys: {
        type: ArrayConstructor;
        default: () => any[];
    };
    defaultCheckedKeys: {
        type: ArrayConstructor;
        default: () => any[];
    };
    defaultExpandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderContent: {
        type: FunctionConstructor;
    };
}>> & {
    "onToggle-change"?: (...args: any[]) => any;
    "onChecked-change"?: (...args: any[]) => any;
}, {
    data: unknown[];
    children: string;
    label: string;
    showCheckbox: boolean;
    nodeKey: string;
    defaultExpandedKeys: unknown[];
    defaultCheckedKeys: unknown[];
    defaultExpandAll: boolean;
}>;
export default _sfc_main;
