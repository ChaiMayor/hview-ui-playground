declare const Progress: import("@hview-plus/utils").SFCWithInstall<import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
        default: string;
        values: string[];
    };
    percentage: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    status: {
        type: StringConstructor;
        default: string;
        values: string[];
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    strokeLinecap: {
        type: import("vue").PropType<NonNullable<"round" | "square" | "inherit" | "butt">>;
        default: string;
    };
    textInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: import("vue").PropType<string | import("./src/progress").ProgressFn | import("./src/progress").ProgressColor[]>;
        default: string;
    };
    format: {
        type: import("vue").PropType<import("./src/progress").ProgressFn>;
        default: (percentage: number) => string;
    };
}, {
    STATUS_COLOR_MAP: Record<string, string>;
    props: any;
    progressClasses: import("vue").ComputedRef<{
        [x: string]: string | boolean;
        "h-progress-without-text": boolean;
        "h-progress-text-inside": boolean;
    }>;
    barStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    relativeStrokeWidth: import("vue").ComputedRef<string>;
    radius: import("vue").ComputedRef<number>;
    trackPath: import("vue").ComputedRef<string>;
    perimeter: import("vue").ComputedRef<number>;
    rate: import("vue").ComputedRef<1 | 0.75>;
    strokeDashoffset: import("vue").ComputedRef<string>;
    trailPathStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    circlePathStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    stroke: import("vue").ComputedRef<string>;
    statusIcon: import("vue").ComputedRef<"success" | "warning" | "close">;
    progressTextSize: import("vue").ComputedRef<number>;
    content: import("vue").ComputedRef<string>;
    getColors: (color: import("./src/progress").ProgressColor[]) => import("./src/progress").ProgressColor[];
    getCurrentColor: (percentage: number) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: StringConstructor;
        default: string;
        values: string[];
    };
    percentage: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    status: {
        type: StringConstructor;
        default: string;
        values: string[];
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    strokeLinecap: {
        type: import("vue").PropType<NonNullable<"round" | "square" | "inherit" | "butt">>;
        default: string;
    };
    textInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: import("vue").PropType<string | import("./src/progress").ProgressFn | import("./src/progress").ProgressColor[]>;
        default: string;
    };
    format: {
        type: import("vue").PropType<import("./src/progress").ProgressFn>;
        default: (percentage: number) => string;
    };
}>>, {
    type: string;
    color: string | import("./src/progress").ProgressFn | import("./src/progress").ProgressColor[];
    width: number;
    percentage: number;
    status: string;
    indeterminate: boolean;
    duration: number;
    strokeWidth: number;
    strokeLinecap: NonNullable<"round" | "square" | "inherit" | "butt">;
    textInside: boolean;
    showText: boolean;
    format: import("./src/progress").ProgressFn;
}>>;
export default Progress;
