declare const _sfc_main: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<number | number[]>;
        default: number;
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    showInput: BooleanConstructor;
    showInputControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    showStops: BooleanConstructor;
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: import("vue").PropType<(val: number) => string | number>;
        default: any;
    };
    disabled: BooleanConstructor;
    range: BooleanConstructor;
    vertical: BooleanConstructor;
    height: {
        type: NumberConstructor;
        default: number;
    };
    width: NumberConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: any;
    };
    rangeStartLabel: {
        type: StringConstructor;
        default: any;
    };
    rangeEndLabel: {
        type: StringConstructor;
        default: any;
    };
    formatValueText: {
        type: import("vue").PropType<(val: number) => string>;
        default: any;
    };
    tooltipClass: {
        type: StringConstructor;
        default: any;
    };
    placement: {
        type: StringConstructor;
        values: {
            (arrayLength: number): import("./slider").Placement[];
            (...items: import("./slider").Placement[]): import("./slider").Placement[];
            new (arrayLength: number): import("./slider").Placement[];
            new (...items: import("./slider").Placement[]): import("./slider").Placement[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: string;
    };
    marks: {
        type: import("vue").PropType<{
            [x: number]: string | {
                style: import("vue").CSSProperties;
                label: any;
            };
        }>;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    props: any;
    modelValue: import("vue").Ref<number | number[]>;
    runway: any;
    slider: any;
    runway_wraper: any;
    runway_wraper_width: import("vue").Ref<number>;
    clicking: import("vue").Ref<boolean>;
    updateState: () => void;
    HSliderRunway: import("vue").DefineComponent<{
        modelValue: {
            type: import("vue").PropType<number | number[]>;
            default: number;
        };
        id: {
            type: StringConstructor;
            default: any;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        showInput: BooleanConstructor;
        showInputControls: {
            type: BooleanConstructor;
            default: boolean;
        };
        showStops: BooleanConstructor;
        showTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        formatTooltip: {
            type: import("vue").PropType<(val: number) => string | number>;
            default: any;
        };
        disabled: BooleanConstructor;
        range: BooleanConstructor;
        vertical: BooleanConstructor;
        height: {
            type: NumberConstructor;
            default: number;
        };
        width: NumberConstructor;
        debounce: {
            type: NumberConstructor;
            default: number;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        rangeStartLabel: {
            type: StringConstructor;
            default: any;
        };
        rangeEndLabel: {
            type: StringConstructor;
            default: any;
        };
        formatValueText: {
            type: import("vue").PropType<(val: number) => string>;
            default: any;
        };
        tooltipClass: {
            type: StringConstructor;
            default: any;
        };
        placement: {
            type: StringConstructor;
            values: {
                (arrayLength: number): import("./slider").Placement[];
                (...items: import("./slider").Placement[]): import("./slider").Placement[];
                new (arrayLength: number): import("./slider").Placement[];
                new (...items: import("./slider").Placement[]): import("./slider").Placement[];
                isArray(arg: any): arg is any[];
                readonly prototype: any[];
                from<T>(arrayLike: ArrayLike<T>): T[];
                from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
                from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
                from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
                of<T_4>(...items: T_4[]): T_4[];
                readonly [Symbol.species]: ArrayConstructor;
            };
            default: string;
        };
        marks: {
            type: import("vue").PropType<{
                [x: number]: string | {
                    style: import("vue").CSSProperties;
                    label: any;
                };
            }>;
        };
        validateEvent: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        props: any;
        slider_runway: import("vue").Ref<HTMLDivElement>;
        btn1: any;
        btn2: any;
        btn1Site: import("vue").Ref<number>;
        btn2Site: import("vue").Ref<number>;
        barStart: import("vue").Ref<number>;
        barEnd: import("vue").Ref<number>;
        stepArr: import("vue").Ref<number[]>;
        tip1: import("vue").Ref<string | number>;
        tip2: import("vue").Ref<string | number>;
        isDraw: import("vue").Ref<boolean>;
        site: import("vue").Ref<number>;
        getStepArrIndex: (val: number) => [number[], number];
        barStyle: import("vue").ComputedRef<{
            bottom: string;
            height: string;
            left?: undefined;
            width?: undefined;
        } | {
            left: string;
            width: string;
            bottom?: undefined;
            height?: undefined;
        }>;
        setMarkerSite: (val: number, flag: "btn1" | "btn2") => void;
        setBarStartEnd: () => void;
        runwayClick: (e: MouseEvent) => boolean;
        getPartWidth: import("vue").ComputedRef<number>;
        update: () => void;
        HSliderMarker: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<number | number[]>;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: any;
            };
            min: {
                type: NumberConstructor;
                default: number;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            step: {
                type: NumberConstructor;
                default: number;
            };
            showInput: BooleanConstructor;
            showInputControls: {
                type: BooleanConstructor;
                default: boolean;
            };
            showStops: BooleanConstructor;
            showTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            formatTooltip: {
                type: import("vue").PropType<(val: number) => string | number>;
                default: any;
            };
            disabled: BooleanConstructor;
            range: BooleanConstructor;
            vertical: BooleanConstructor;
            height: {
                type: NumberConstructor;
                default: number;
            };
            width: NumberConstructor;
            debounce: {
                type: NumberConstructor;
                default: number;
            };
            label: {
                type: StringConstructor;
                default: any;
            };
            rangeStartLabel: {
                type: StringConstructor;
                default: any;
            };
            rangeEndLabel: {
                type: StringConstructor;
                default: any;
            };
            formatValueText: {
                type: import("vue").PropType<(val: number) => string>;
                default: any;
            };
            tooltipClass: {
                type: StringConstructor;
                default: any;
            };
            placement: {
                type: StringConstructor;
                values: {
                    (arrayLength: number): import("./slider").Placement[];
                    (...items: import("./slider").Placement[]): import("./slider").Placement[];
                    new (arrayLength: number): import("./slider").Placement[];
                    new (...items: import("./slider").Placement[]): import("./slider").Placement[];
                    isArray(arg: any): arg is any[];
                    readonly prototype: any[];
                    from<T>(arrayLike: ArrayLike<T>): T[];
                    from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
                    from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
                    from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
                    of<T_4>(...items: T_4[]): T_4[];
                    readonly [Symbol.species]: ArrayConstructor;
                };
                default: string;
            };
            marks: {
                type: import("vue").PropType<{
                    [x: number]: string | {
                        style: import("vue").CSSProperties;
                        label: any;
                    };
                }>;
            };
            validateEvent: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            props: any;
            emits: (event: "update:isDraw" | "setMarkerSite", ...args: any[]) => void;
            attrs: {
                [x: string]: unknown;
            };
            btn: import("vue").Ref<HTMLDivElement>;
            site: import("vue").Ref<number>;
            btnIndex: import("vue").Ref<number>;
            buttonStyle: import("vue").ComputedRef<{
                bottom: string;
                left?: undefined;
            } | {
                left: string;
                bottom?: undefined;
            }>;
            mountMouseEvent: (dom: HTMLDivElement) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:isDraw" | "setMarkerSite")[], "update:isDraw" | "setMarkerSite", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<number | number[]>;
                default: number;
            };
            id: {
                type: StringConstructor;
                default: any;
            };
            min: {
                type: NumberConstructor;
                default: number;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            step: {
                type: NumberConstructor;
                default: number;
            };
            showInput: BooleanConstructor;
            showInputControls: {
                type: BooleanConstructor;
                default: boolean;
            };
            showStops: BooleanConstructor;
            showTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            formatTooltip: {
                type: import("vue").PropType<(val: number) => string | number>;
                default: any;
            };
            disabled: BooleanConstructor;
            range: BooleanConstructor;
            vertical: BooleanConstructor;
            height: {
                type: NumberConstructor;
                default: number;
            };
            width: NumberConstructor;
            debounce: {
                type: NumberConstructor;
                default: number;
            };
            label: {
                type: StringConstructor;
                default: any;
            };
            rangeStartLabel: {
                type: StringConstructor;
                default: any;
            };
            rangeEndLabel: {
                type: StringConstructor;
                default: any;
            };
            formatValueText: {
                type: import("vue").PropType<(val: number) => string>;
                default: any;
            };
            tooltipClass: {
                type: StringConstructor;
                default: any;
            };
            placement: {
                type: StringConstructor;
                values: {
                    (arrayLength: number): import("./slider").Placement[];
                    (...items: import("./slider").Placement[]): import("./slider").Placement[];
                    new (arrayLength: number): import("./slider").Placement[];
                    new (...items: import("./slider").Placement[]): import("./slider").Placement[];
                    isArray(arg: any): arg is any[];
                    readonly prototype: any[];
                    from<T>(arrayLike: ArrayLike<T>): T[];
                    from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
                    from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
                    from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
                    of<T_4>(...items: T_4[]): T_4[];
                    readonly [Symbol.species]: ArrayConstructor;
                };
                default: string;
            };
            marks: {
                type: import("vue").PropType<{
                    [x: number]: string | {
                        style: import("vue").CSSProperties;
                        label: any;
                    };
                }>;
            };
            validateEvent: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:isDraw"?: (...args: any[]) => any;
            onSetMarkerSite?: (...args: any[]) => any;
        }, {
            disabled: boolean;
            modelValue: number | number[];
            vertical: boolean;
            height: number;
            placement: string;
            label: string;
            id: string;
            min: number;
            max: number;
            step: number;
            showInput: boolean;
            showInputControls: boolean;
            showStops: boolean;
            showTooltip: boolean;
            formatTooltip: (val: number) => string | number;
            range: boolean;
            debounce: number;
            rangeStartLabel: string;
            rangeEndLabel: string;
            formatValueText: (val: number) => string;
            tooltipClass: string;
            validateEvent: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<number | number[]>;
            default: number;
        };
        id: {
            type: StringConstructor;
            default: any;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        showInput: BooleanConstructor;
        showInputControls: {
            type: BooleanConstructor;
            default: boolean;
        };
        showStops: BooleanConstructor;
        showTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        formatTooltip: {
            type: import("vue").PropType<(val: number) => string | number>;
            default: any;
        };
        disabled: BooleanConstructor;
        range: BooleanConstructor;
        vertical: BooleanConstructor;
        height: {
            type: NumberConstructor;
            default: number;
        };
        width: NumberConstructor;
        debounce: {
            type: NumberConstructor;
            default: number;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        rangeStartLabel: {
            type: StringConstructor;
            default: any;
        };
        rangeEndLabel: {
            type: StringConstructor;
            default: any;
        };
        formatValueText: {
            type: import("vue").PropType<(val: number) => string>;
            default: any;
        };
        tooltipClass: {
            type: StringConstructor;
            default: any;
        };
        placement: {
            type: StringConstructor;
            values: {
                (arrayLength: number): import("./slider").Placement[];
                (...items: import("./slider").Placement[]): import("./slider").Placement[];
                new (arrayLength: number): import("./slider").Placement[];
                new (...items: import("./slider").Placement[]): import("./slider").Placement[];
                isArray(arg: any): arg is any[];
                readonly prototype: any[];
                from<T>(arrayLike: ArrayLike<T>): T[];
                from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
                from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
                from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
                of<T_4>(...items: T_4[]): T_4[];
                readonly [Symbol.species]: ArrayConstructor;
            };
            default: string;
        };
        marks: {
            type: import("vue").PropType<{
                [x: number]: string | {
                    style: import("vue").CSSProperties;
                    label: any;
                };
            }>;
        };
        validateEvent: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        disabled: boolean;
        modelValue: number | number[];
        vertical: boolean;
        height: number;
        placement: string;
        label: string;
        id: string;
        min: number;
        max: number;
        step: number;
        showInput: boolean;
        showInputControls: boolean;
        showStops: boolean;
        showTooltip: boolean;
        formatTooltip: (val: number) => string | number;
        range: boolean;
        debounce: number;
        rangeStartLabel: string;
        rangeEndLabel: string;
        formatValueText: (val: number) => string;
        tooltipClass: string;
        validateEvent: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<number | number[]>;
        default: number;
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    showInput: BooleanConstructor;
    showInputControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    showStops: BooleanConstructor;
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: import("vue").PropType<(val: number) => string | number>;
        default: any;
    };
    disabled: BooleanConstructor;
    range: BooleanConstructor;
    vertical: BooleanConstructor;
    height: {
        type: NumberConstructor;
        default: number;
    };
    width: NumberConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: any;
    };
    rangeStartLabel: {
        type: StringConstructor;
        default: any;
    };
    rangeEndLabel: {
        type: StringConstructor;
        default: any;
    };
    formatValueText: {
        type: import("vue").PropType<(val: number) => string>;
        default: any;
    };
    tooltipClass: {
        type: StringConstructor;
        default: any;
    };
    placement: {
        type: StringConstructor;
        values: {
            (arrayLength: number): import("./slider").Placement[];
            (...items: import("./slider").Placement[]): import("./slider").Placement[];
            new (arrayLength: number): import("./slider").Placement[];
            new (...items: import("./slider").Placement[]): import("./slider").Placement[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: string;
    };
    marks: {
        type: import("vue").PropType<{
            [x: number]: string | {
                style: import("vue").CSSProperties;
                label: any;
            };
        }>;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    disabled: boolean;
    modelValue: number | number[];
    vertical: boolean;
    height: number;
    placement: string;
    label: string;
    id: string;
    min: number;
    max: number;
    step: number;
    showInput: boolean;
    showInputControls: boolean;
    showStops: boolean;
    showTooltip: boolean;
    formatTooltip: (val: number) => string | number;
    range: boolean;
    debounce: number;
    rangeStartLabel: string;
    rangeEndLabel: string;
    formatValueText: (val: number) => string;
    tooltipClass: string;
    validateEvent: boolean;
}>;
export default _sfc_main;
