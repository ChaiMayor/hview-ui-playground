import type { SliderMarkerProps } from "./marker";
import { ExtractPropTypes } from "vue";
declare type BasePlacement = "top" | "bottom" | "right" | "left";
declare type AutoPlacement = "auto" | "auto-start" | "auto-end";
declare type VariationPlacement = "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end";
declare type Arrayable<T> = T | T[];
export declare type Placement = AutoPlacement | BasePlacement | VariationPlacement;
declare type SliderMarks = Record<number, string | SliderMarkerProps["mark"]>;
export declare const SliderProps: {
    modelValue: {
        type: import("vue").PropType<Arrayable<number>>;
        default: number;
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    showInput: BooleanConstructor;
    showInputControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    showStops: BooleanConstructor;
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: import("vue").PropType<(val: number) => number | string>;
        default: any;
    };
    disabled: BooleanConstructor;
    range: BooleanConstructor;
    vertical: BooleanConstructor;
    height: {
        type: NumberConstructor;
        default: number;
    };
    width: NumberConstructor;
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: any;
    };
    rangeStartLabel: {
        type: StringConstructor;
        default: any;
    };
    rangeEndLabel: {
        type: StringConstructor;
        default: any;
    };
    formatValueText: {
        type: import("vue").PropType<(val: number) => string>;
        default: any;
    };
    tooltipClass: {
        type: StringConstructor;
        default: any;
    };
    placement: {
        type: StringConstructor;
        values: {
            (arrayLength: number): Placement[];
            (...items: Placement[]): Placement[];
            new (arrayLength: number): Placement[];
            new (...items: Placement[]): Placement[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: string;
    };
    marks: {
        type: import("vue").PropType<SliderMarks>;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare type SliderProps = ExtractPropTypes<typeof SliderProps>;
export {};
