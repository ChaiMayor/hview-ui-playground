declare const Tooltip: import("@hview-plus/utils").SFCWithInstall<import("vue").DefineComponent<{
    placement: {
        type: StringConstructor;
        values: string[];
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    content: (StringConstructor | NumberConstructor)[];
    width: StringConstructor;
}, {
    props: any;
    instance: import("vue").ComponentInternalInstance;
    placement: import("vue").Ref<string>;
    content: import("vue").Ref<string | number>;
    width: import("vue").Ref<string>;
    modelValue: import("vue").Ref<boolean>;
    isShow: import("vue").Ref<boolean>;
    tip: any;
    tid: string;
    hide: (tid: string) => void;
    show: (tip: any) => void;
    calcStyle: (Rect: any, tip: any, key: string) => {
        x: number;
        y: number;
    };
    update: (tip: any, tid: string) => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    placement: {
        type: StringConstructor;
        values: string[];
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    content: (StringConstructor | NumberConstructor)[];
    width: StringConstructor;
}>>, {
    modelValue: boolean;
}>>;
export default Tooltip;
