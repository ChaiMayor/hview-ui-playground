import { defineComponent as P, ref as r, computed as T, watch as U, onMounted as H, onUnmounted as J, openBlock as b, createElementBlock as g, normalizeStyle as I, createElementVNode as O, unref as R, Fragment as X, renderList as j, createCommentVNode as V, createVNode as z, mergeProps as _, createBlock as G } from "vue";
import { SliderProps as W } from "./slider2.mjs";
import $ from "./marker.mjs";
import { isArray as E } from "@vue/shared";
import { judgeLocation as N, cutChunk as Y } from "./utils.mjs";
import { toFixed as q, offsetTop as K, offsetLeft as Q } from "@hview-plus/utils";
const Z = {
  key: 0,
  class: "h-slider__stop"
}, ee = {
  name: "HSliderRunway"
}, ie = /* @__PURE__ */ P({
  ...ee,
  props: W,
  setup(D, { expose: A }) {
    const e = D, o = r(null), v = r(null), d = r(null), i = r(0), s = r(0), h = r(0), p = r(0), f = r([]), w = r(0), y = r(0), c = r(!1), S = r(0), L = (t) => {
      let a = 0;
      const l = JSON.parse(JSON.stringify(f.value));
      l.unshift(0), l.push(Number.MAX_SAFE_INTEGER);
      for (let n = 0; n < l.length; n++)
        if (t <= l[n]) {
          a = N(t, l[n - 1], l[n]) === "end" ? n : n - 1;
          break;
        }
      return [l, a];
    }, B = T(() => e.vertical ? {
      bottom: `${h.value}%`,
      height: `${p.value}%`
    } : {
      left: `${h.value}%`,
      width: `${p.value}%`
    }), m = (t, a) => {
      let l = 0, [n, u] = L(t);
      u === -1 && (u = 0), l = Number(q(String(n[u] / e.width * 100), 0)), a === "btn1" ? (i.value = l, w.value = u * e.step + e.min, v.value.btnIndex = u - (u === 0 ? 0 : 1)) : (s.value = l, y.value = u * e.step + e.min, d.value.btnIndex = u - (u === 0 ? 0 : 1)), C(), e.formatTooltip && (w.value = e.formatTooltip(w.value), y.value = e.formatTooltip(y.value));
    }, C = () => {
      e.range && E(e.modelValue) ? (h.value = Math.min(s.value, i.value), p.value = Math.max(s.value, i.value) - Math.min(s.value, i.value)) : p.value = i.value;
    }, M = (t) => {
      if (e.disabled || c.value)
        return !1;
      let a = "btn1";
      if (e.vertical ? S.value = K(o.value) + o.value.offsetHeight - t.pageY : S.value = t.pageX - Q(o.value), e.range) {
        let l = v.value.btnIndex > d.value.btnIndex ? "start" : "end", n = v.value.btnIndex > d.value.btnIndex ? v.value.btnIndex : d.value.btnIndex, u = l === "start" ? "end" : "start", F = l === "start" ? d.value.btnIndex : v.value.btnIndex;
        N(S.value, f.value[F], f.value[n]) === u ? a = "btn1" : a = "btn2";
      }
      return m(S.value, a), !1;
    }, k = T(() => e.width / (e.max - e.min)), x = () => {
      f.value = Y(e.width, e.step, e.max - e.min), e.range && E(e.modelValue) ? (m(k.value * (e.modelValue[0] - e.min), "btn1"), m(k.value * (e.modelValue[1] - e.min), "btn2"), h.value = Math.min(s.value, i.value), p.value = Math.max(s.value, i.value) - Math.min(s.value, i.value)) : m(k.value * (e.modelValue - e.min), "btn1");
    };
    return U([() => e.width, () => e.step, () => e.max, () => e.min], () => {
      x();
    }), H(() => {
      x(), o.value && o.value.addEventListener("click", M);
    }), J(() => {
      o.value && o.value.removeEventListener("click", M);
    }), A({
      update: x
    }), (t, a) => (b(), g("div", {
      class: "h-slider__runway",
      ref_key: "slider_runway",
      ref: o,
      style: I({ height: `${t.height}px` })
    }, [
      O("div", {
        class: "h-slider__bar",
        style: I(R(B))
      }, null, 4),
      t.showStops ? (b(), g("div", Z, [
        (b(!0), g(X, null, j(f.value, (l, n) => (b(), g("div", {
          class: "h-slider__stop_item",
          style: I(t.vertical ? `bottom: ${l}px` : `left: ${l}px`),
          key: n
        }, null, 4))), 128))
      ])) : V("", !0),
      z($, _({
        ref_key: "btn1",
        ref: v
      }, t.$attrs, {
        "model-value": i.value,
        placement: t.placement,
        tip: w.value,
        isDraw: c.value,
        "onUpdate:isDraw": a[0] || (a[0] = (l) => c.value = l),
        disabled: t.disabled,
        showTooltip: t.showTooltip,
        vertical: t.vertical,
        yname: "btn1",
        onSetMarkerSite: m
      }), null, 16, ["model-value", "placement", "tip", "isDraw", "disabled", "showTooltip", "vertical"]),
      t.range ? (b(), G($, _({
        key: 1,
        ref_key: "btn2",
        ref: d
      }, t.$attrs, {
        yname: "btn2",
        isDraw: c.value,
        "onUpdate:isDraw": a[1] || (a[1] = (l) => c.value = l),
        placement: t.placement,
        showTooltip: t.showTooltip,
        disabled: t.disabled,
        "model-value": s.value,
        vertical: t.vertical,
        tip: y.value,
        onSetMarkerSite: m
      }), null, 16, ["isDraw", "placement", "showTooltip", "disabled", "model-value", "vertical", "tip"])) : V("", !0)
    ], 4));
  }
});
export {
  ie as default
};
