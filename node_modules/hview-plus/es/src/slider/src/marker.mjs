import { defineComponent as y, useAttrs as b, ref as u, computed as h, onMounted as k, resolveComponent as S, openBlock as a, createElementBlock as m, createBlock as M, withCtx as g, createElementVNode as B, normalizeStyle as i, unref as p } from "vue";
import { SliderProps as C } from "./slider2.mjs";
import { offsetTop as D, offsetLeft as E } from "@hview-plus/utils";
const T = { class: "h-slider__button-wrapper" }, V = {
  name: "HSliderMarker"
}, z = /* @__PURE__ */ y({
  ...V,
  props: C,
  emits: ["update:isDraw", "setMarkerSite"],
  setup(f, { expose: d, emit: n }) {
    const e = f, o = b(), r = u(null), l = u(0), _ = u(0), c = h(() => e.vertical ? {
      bottom: `${e.modelValue}%`
    } : {
      left: `${e.modelValue}%`
    }), w = (t) => {
      t.onmousedown = function() {
        return document.onmousemove = function(s) {
          return e.disabled || (n("update:isDraw", !0), e.vertical ? l.value = D(o.runway_wraper) + o.runway_wraper.offsetHeight - s.pageY : l.value = s.pageX - E(o.runway_wraper), n("setMarkerSite", l.value, o.yname)), !1;
        }, document.onmouseup = function() {
          return document.onmousemove = null, document.onmousedown = null, document.onmouseup = null, setTimeout(() => {
            n("update:isDraw", !1);
          }, 50), !1;
        }, !1;
      };
    };
    return k(() => {
      w(r.value);
    }), d({
      btnIndex: _
    }), (t, s) => {
      const v = S("h-tooltip");
      return a(), m("div", T, [
        t.showTooltip ? (a(), M(v, {
          key: 0,
          content: t.$attrs.tip,
          placement: t.placement
        }, {
          default: g(() => [
            B("div", {
              ref_key: "btn",
              ref: r,
              class: "h-slider__button",
              style: i(p(c))
            }, null, 4)
          ]),
          _: 1
        }, 8, ["content", "placement"])) : (a(), m("div", {
          key: 1,
          ref_key: "btn",
          ref: r,
          class: "h-slider__button",
          style: i(p(c))
        }, null, 4))
      ]);
    };
  }
});
export {
  z as default
};
