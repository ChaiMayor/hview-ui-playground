import { SetScrollTop, SetScrollLeft } from "./scorllbar-fn";
declare const _sfc_main: import("vue").DefineComponent<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
    maxHeight: {
        type: NumberConstructor;
        required: true;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
    viewHeight: {
        type: NumberConstructor;
        required: true;
    };
    viewWidth: {
        type: NumberConstructor;
        required: true;
    };
    thumbHeight: {
        type: NumberConstructor;
        required: true;
    };
    thumbWidth: {
        type: NumberConstructor;
        required: true;
    };
    native: {
        type: BooleanConstructor;
        required: true;
    };
    always: {
        type: BooleanConstructor;
        required: true;
    };
    noresize: {
        type: BooleanConstructor;
        required: true;
    };
    retio: {
        type: NumberConstructor;
        required: true;
    };
    move: {
        type: StringConstructor;
        required: true;
    };
}, {
    props: any;
    emits: (event: "update:isDraw" | "setScrollViewTop" | "setScrollViewLeft", ...args: any[]) => void;
    scrollTop: import("vue").Ref<number>;
    scrollLeft: import("vue").Ref<number>;
    setScrollTop: SetScrollTop;
    setScrollLeft: SetScrollLeft;
    setTopToViewTop: (top: number) => void;
    setLeftToViewLeft: (left: number) => void;
    handleDrawScrollVal: (val: number, move: "moveX" | "moveY") => void;
    scrollbar_thumb: any;
    scrollbar_bar: import("vue").Ref<HTMLDivElement>;
    height: import("vue").Ref<number>;
    width: import("vue").Ref<number>;
    thumbMax: import("vue").Ref<number>;
    isCount: import("vue").Ref<boolean>;
    isDraw: import("vue").Ref<boolean>;
    scrollbar_style: import("vue").ComputedRef<{
        width: string;
        height?: undefined;
    } | {
        height: string;
        width?: undefined;
    }>;
    scrollbarThumb_style: import("vue").ComputedRef<{
        width: string;
        left: string;
        height?: undefined;
        top?: undefined;
    } | {
        height: string;
        top: string;
        width?: undefined;
        left?: undefined;
    }>;
    isHide: import("vue").ComputedRef<boolean>;
    setDrawScrollThumb: (dom: HTMLDivElement, move: "moveX" | "moveY") => void;
    countAllHeight: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:isDraw" | "setScrollViewTop" | "setScrollViewLeft")[], "update:isDraw" | "setScrollViewTop" | "setScrollViewLeft", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
    maxHeight: {
        type: NumberConstructor;
        required: true;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
    viewHeight: {
        type: NumberConstructor;
        required: true;
    };
    viewWidth: {
        type: NumberConstructor;
        required: true;
    };
    thumbHeight: {
        type: NumberConstructor;
        required: true;
    };
    thumbWidth: {
        type: NumberConstructor;
        required: true;
    };
    native: {
        type: BooleanConstructor;
        required: true;
    };
    always: {
        type: BooleanConstructor;
        required: true;
    };
    noresize: {
        type: BooleanConstructor;
        required: true;
    };
    retio: {
        type: NumberConstructor;
        required: true;
    };
    move: {
        type: StringConstructor;
        required: true;
    };
}>> & {
    "onUpdate:isDraw"?: (...args: any[]) => any;
    onSetScrollViewTop?: (...args: any[]) => any;
    onSetScrollViewLeft?: (...args: any[]) => any;
}, {}>;
export default _sfc_main;
