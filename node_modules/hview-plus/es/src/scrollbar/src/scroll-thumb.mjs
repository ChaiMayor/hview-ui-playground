import { defineComponent as k, ref as u, computed as w, watch as X, onMounted as B, onUnmounted as I, openBlock as C, createElementBlock as E, normalizeClass as F, unref as p, normalizeStyle as x, createElementVNode as M, nextTick as H } from "vue";
import "../style/thumb.mjs";
const A = {
  name: "HThumb"
}, q = /* @__PURE__ */ k({
  ...A,
  props: {
    height: null,
    maxHeight: null,
    width: null,
    viewHeight: null,
    viewWidth: null,
    thumbHeight: null,
    thumbWidth: null,
    native: { type: Boolean },
    always: { type: Boolean },
    noresize: { type: Boolean },
    retio: null,
    move: null
  },
  emits: ["update:isDraw", "setScrollViewTop", "setScrollViewLeft"],
  setup(v, { expose: _, emit: c }) {
    const e = v, h = u(0), m = u(0), y = (t) => {
      const l = e.viewHeight - r.value, o = t * r.value * e.retio / l;
      if (o >= a.value)
        return h.value = a.value;
      h.value = o;
    }, S = (t) => {
      const l = e.viewWidth - n.value, o = t * n.value * e.retio / l;
      if (o >= a.value)
        return m.value = a.value;
      m.value = o;
    }, W = (t) => {
      const l = Number(t * e.viewHeight / r.value).toFixed(5);
      c("setScrollViewTop", l);
    }, L = (t) => {
      const l = Number(t * e.viewWidth / n.value).toFixed(5);
      c("setScrollViewLeft", l);
    }, b = (t, l) => {
      let o = t;
      t <= 0 && (t = 0), t >= a.value && (t = a.value, o = l === "moveX" ? n.value : r.value), l === "moveX" ? m.value = t : h.value = t, s.value = !0, c("update:isDraw", s.value), l === "moveX" ? L(o) : W(o);
    }, i = u({}), V = u(null), r = u(Number(parseInt(e.height))), n = u(Number(parseInt(e.width))), a = u(0), f = u(!1), s = u(!1), N = w(() => e.move === "moveX" ? {
      width: `${e.width}px`
    } : {
      height: `${e.height}`
    }), z = w(() => e.move === "moveX" ? {
      width: `${e.thumbWidth}px`,
      left: `${m.value}px`
    } : {
      height: `${e.thumbHeight}px`,
      top: `${h.value}px`
    }), D = w(() => e.viewWidth ? !e.height && !e.maxHeight && e.viewWidth <= n.value : !e.height && !e.maxHeight);
    function Y(t, l) {
      t.onmousedown = function(o) {
        let g = l === "moveX" ? o.pageX - t.offsetLeft : o.pageY - t.offsetTop;
        return document.onmousemove = function(T) {
          let $ = l === "moveX" ? T.pageX - g : T.pageY - g;
          return b($, l === "moveX" ? "moveX" : "moveY"), !1;
        }, document.onmouseup = function() {
          return document.onmousemove = null, document.onmouseup = null, document.onmousedown = null, H(() => {
            s.value = !1, c("update:isDraw", s.value);
          }), !1;
        }, !1;
      };
    }
    const d = () => {
      f.value || (f.value = !0, n.value = Number(parseInt(e.width)), r.value = Number(parseInt(e.height)), H(() => {
        a.value = e.move === "moveX" ? n.value - i.value.offsetWidth : r.value - i.value.offsetHeight;
      }), f.value = !1);
    };
    return X(
      () => e.height,
      () => {
        e.noresize || d();
      }
    ), X(
      () => e.viewHeight,
      () => {
        e.noresize || d();
      }
    ), B(() => {
      Y(i.value, e.move === "moveX" ? "moveX" : "moveY"), d();
    }), I(() => {
      !i.value || (i.value.onmousedown = null);
    }), _({
      setScrollTop: y,
      setScrollLeft: S,
      handleDrawScrollVal: b
    }), (t, l) => (C(), E("div", {
      ref_key: "scrollbar_bar",
      ref: V,
      class: F([
        "h-scrollbar__bar",
        v.move === "moveX" ? "is-horizontal" : "is-vertical",
        { show: s.value },
        { hide: p(D) },
        { native: v.native },
        { always: v.always }
      ]),
      style: x(p(N))
    }, [
      M("div", {
        ref_key: "scrollbar_thumb",
        ref: i,
        class: "h-scrollbar__thumb",
        style: x(p(z))
      }, null, 4)
    ], 6));
  }
});
export {
  q as default
};
