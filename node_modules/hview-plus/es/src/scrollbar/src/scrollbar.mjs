import { defineComponent as E, ref as t, computed as y, watch as _, onMounted as F, nextTick as $, onUnmounted as M, openBlock as T, createElementBlock as U, createElementVNode as Y, normalizeClass as z, normalizeStyle as L, unref as N, createBlock as A, resolveDynamicComponent as O, withCtx as P, renderSlot as R, createVNode as j } from "vue";
import "../style/index.mjs";
import { ScrollBarProps as q } from "./scrollbar2.mjs";
import G from "./scroll-thumb.mjs";
import { toFixed as d } from "@hview-plus/utils";
const J = {
  class: "h-scrollbar",
  ref: "scrollbar"
}, K = {
  name: "HScrollbar"
}, ae = /* @__PURE__ */ E({
  ...K,
  props: q,
  emits: ["scroll"],
  setup(k, { expose: D, emit: V }) {
    const l = k, o = t(null), i = t(null), u = t(null), a = t(Number(parseInt(l.height))), v = t(Number(parseInt(l.maxHeight))), n = t(0), f = t(0), b = t(0), c = t(!1), S = t(0), s = t(0), h = t(0), H = t(!1), p = y(() => !l.height && !l.maxHeight ? "moveX" : "moveY"), W = y(() => a.value ? {
      height: `${a.value}px`
    } : {}), C = (e) => {
      u.value.handleDrawScrollVal(e, "moveY"), c.value = !1;
    }, x = (e) => {
      u.value.handleDrawScrollVal(e, "moveX"), c.value = !1;
    }, m = () => {
      if (c.value)
        return;
      const e = p.value === "moveX" ? Number(o.value.scrollLeft.toFixed(5)) : Number(o.value.scrollTop.toFixed(5));
      p.value === "moveX" ? u.value.setScrollLeft(e) : u.value.setScrollTop(e), V("scroll", { scrollTop: o.value.scrollTop, scrollLeft: o.value.scrollLeft });
    }, I = (e) => {
      o.value.scrollTop = e;
    }, X = (e) => {
      o.value.scrollLeft = e;
    }, w = () => {
      var e, r;
      H.value = !0, n.value = i.value.offsetWidth, f.value = (e = i.value) == null ? void 0 : e.offsetHeight, b.value = (r = i.value) == null ? void 0 : r.scrollWidth, s.value = d(a.value * a.value / f.value, 0), a.value !== -1 && s.value <= l.minSize && (s.value = l.minSize), h.value = d(n.value * n.value / b.value, 0), h.value <= l.minSize && (h.value = l.minSize), v.value && (f.value >= v.value ? a.value = v.value : (a.value = 0, s.value = 0)), S.value = 1 - (p.value === "moveX" ? d(h.value / n.value, 2) : d(s.value / a.value, 2)), H.value = !1;
    };
    _(
      () => l.height,
      () => {
        l.noresize || (a.value = Number(parseInt(l.height)), w(), m());
      }
    ), _(
      () => l.maxHeight,
      () => {
        l.noresize || (v.value = Number(parseInt(l.maxHeight)), a.value = Number(parseInt(l.height)) || 0, w(), m());
      }
    );
    let g = null;
    return F(() => {
      var r;
      w(), (r = o.value) == null || r.addEventListener("scroll", m), g = new MutationObserver(e);
      function e() {
        l.noresize || (w(), m());
      }
      $(() => {
        g.observe(i.value, {
          childList: !0,
          characterData: !0
        });
      });
    }), M(() => {
      var e;
      (e = o.value) == null || e.removeEventListener("scroll", m), g.disconnect();
    }), D({
      setScrollTop: C,
      setScrollLeft: x,
      wrapRef: o
    }), (e, r) => (T(), U("div", J, [
      Y("div", {
        class: z([e.wrapClass, "h-scrollbar__wrap", { native: e.native }]),
        ref_key: "scrollbar_wrap",
        ref: o,
        style: L([N(W), e.wrapStyle])
      }, [
        (T(), A(O(e.tag), {
          class: z([e.viewClass, "h-scrollbar__view"]),
          ref_key: "scrollbar_view",
          ref: i,
          style: L(e.viewStyle)
        }, {
          default: P(() => [
            R(e.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"]))
      ], 6),
      j(G, {
        ref_key: "scrollThumb",
        ref: u,
        onSetScrollViewTop: I,
        onSetScrollViewLeft: X,
        always: e.always,
        isDraw: c.value,
        "onUpdate:isDraw": r[0] || (r[0] = (B) => c.value = B),
        height: a.value,
        maxHeight: v.value,
        width: n.value,
        noresize: e.noresize,
        viewHeight: f.value,
        viewWidth: b.value,
        thumbWidth: h.value,
        native: l.native,
        move: N(p),
        retio: S.value,
        thumbHeight: s.value
      }, null, 8, ["always", "isDraw", "height", "maxHeight", "width", "noresize", "viewHeight", "viewWidth", "thumbWidth", "native", "move", "retio", "thumbHeight"])
    ], 512));
  }
});
export {
  ae as default
};
