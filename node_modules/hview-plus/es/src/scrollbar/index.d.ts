declare const ScrollBar: import("@hview-plus/utils").SFCWithInstall<import("vue").DefineComponent<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    native: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
        default: string;
    };
    wrapClass: {
        type: StringConstructor;
        default: string;
    };
    viewStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
        default: string;
    };
    viewClass: {
        type: StringConstructor;
        default: string;
    };
    noresize: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    always: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSize: {
        type: NumberConstructor;
        default: number;
    };
}, {
    props: any;
    emits: (event: "scroll", ...args: any[]) => void;
    scrollbar_wrap: import("vue").Ref<HTMLDivElement>;
    scrollbar_view: import("vue").Ref<HTMLDivElement>;
    scrollThumb: any;
    height: import("vue").Ref<number>;
    maxHeight: import("vue").Ref<number>;
    width: import("vue").Ref<number>;
    viewHeight: import("vue").Ref<number>;
    viewWidth: import("vue").Ref<number>;
    isDraw: import("vue").Ref<boolean>;
    retio: import("vue").Ref<number>;
    thumbHeight: import("vue").Ref<number>;
    thumbWidth: import("vue").Ref<number>;
    isCount: import("vue").Ref<boolean>;
    move: import("vue").ComputedRef<"moveX" | "moveY">;
    height_style: import("vue").ComputedRef<{
        height?: undefined;
    } | {
        height: string;
    }>;
    setScrollTop: (top: number) => void;
    setScrollLeft: (left: number) => void;
    setScrollTumb: () => void;
    setScrollViewTop: (top: number) => void;
    setScrollViewLeft: (left: number) => void;
    countAllHeight: () => void;
    observer: MutationObserver;
    HThumb: import("vue").DefineComponent<{
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: true;
        };
        maxHeight: {
            type: NumberConstructor;
            required: true;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: true;
        };
        viewHeight: {
            type: NumberConstructor;
            required: true;
        };
        viewWidth: {
            type: NumberConstructor;
            required: true;
        };
        thumbHeight: {
            type: NumberConstructor;
            required: true;
        };
        thumbWidth: {
            type: NumberConstructor;
            required: true;
        };
        native: {
            type: BooleanConstructor;
            required: true;
        };
        always: {
            type: BooleanConstructor;
            required: true;
        };
        noresize: {
            type: BooleanConstructor;
            required: true;
        };
        retio: {
            type: NumberConstructor;
            required: true;
        };
        move: {
            type: StringConstructor;
            required: true;
        };
    }, {
        props: any;
        emits: (event: "update:isDraw" | "setScrollViewTop" | "setScrollViewLeft", ...args: any[]) => void;
        scrollTop: import("vue").Ref<number>;
        scrollLeft: import("vue").Ref<number>;
        setScrollTop: import("./src/scorllbar-fn").SetScrollTop;
        setScrollLeft: import("./src/scorllbar-fn").SetScrollLeft;
        setTopToViewTop: (top: number) => void;
        setLeftToViewLeft: (left: number) => void;
        handleDrawScrollVal: (val: number, move: "moveX" | "moveY") => void;
        scrollbar_thumb: any;
        scrollbar_bar: import("vue").Ref<HTMLDivElement>;
        height: import("vue").Ref<number>;
        width: import("vue").Ref<number>;
        thumbMax: import("vue").Ref<number>;
        isCount: import("vue").Ref<boolean>;
        isDraw: import("vue").Ref<boolean>;
        scrollbar_style: import("vue").ComputedRef<{
            width: string;
            height?: undefined;
        } | {
            height: string;
            width?: undefined;
        }>;
        scrollbarThumb_style: import("vue").ComputedRef<{
            width: string;
            left: string;
            height?: undefined;
            top?: undefined;
        } | {
            height: string;
            top: string;
            width?: undefined;
            left?: undefined;
        }>;
        isHide: import("vue").ComputedRef<boolean>;
        setDrawScrollThumb: (dom: HTMLDivElement, move: "moveX" | "moveY") => void;
        countAllHeight: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:isDraw" | "setScrollViewTop" | "setScrollViewLeft")[], "update:isDraw" | "setScrollViewTop" | "setScrollViewLeft", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: true;
        };
        maxHeight: {
            type: NumberConstructor;
            required: true;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: true;
        };
        viewHeight: {
            type: NumberConstructor;
            required: true;
        };
        viewWidth: {
            type: NumberConstructor;
            required: true;
        };
        thumbHeight: {
            type: NumberConstructor;
            required: true;
        };
        thumbWidth: {
            type: NumberConstructor;
            required: true;
        };
        native: {
            type: BooleanConstructor;
            required: true;
        };
        always: {
            type: BooleanConstructor;
            required: true;
        };
        noresize: {
            type: BooleanConstructor;
            required: true;
        };
        retio: {
            type: NumberConstructor;
            required: true;
        };
        move: {
            type: StringConstructor;
            required: true;
        };
    }>> & {
        "onUpdate:isDraw"?: (...args: any[]) => any;
        onSetScrollViewTop?: (...args: any[]) => any;
        onSetScrollViewLeft?: (...args: any[]) => any;
    }, {}>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll"[], "scroll", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    native: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
        default: string;
    };
    wrapClass: {
        type: StringConstructor;
        default: string;
    };
    viewStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
        default: string;
    };
    viewClass: {
        type: StringConstructor;
        default: string;
    };
    noresize: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    always: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSize: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    onScroll?: (...args: any[]) => any;
}, {
    always: boolean;
    height: string | number;
    maxHeight: string | number;
    native: boolean;
    wrapStyle: import("vue").StyleValue;
    wrapClass: string;
    viewStyle: import("vue").StyleValue;
    viewClass: string;
    noresize: boolean;
    tag: string;
    minSize: number;
}>>;
export default ScrollBar;
