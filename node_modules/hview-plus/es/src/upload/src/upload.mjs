import { defineComponent as N, onMounted as T, ref as i, resolveComponent as F, openBlock as s, createElementBlock as o, withDirectives as M, createElementVNode as t, vShow as S, Fragment as y, renderList as E, createVNode as a, withCtx as L, createTextVNode as g, renderSlot as f, createCommentVNode as B, toDisplayString as R } from "vue";
import "../style/index.mjs";
import "../style/drag.mjs";
import { uploadProps as j } from "./upload2.mjs";
const H = { class: "h-upload" }, O = ["multiple", "accept"], P = {
  key: 0,
  class: "h-upload-image"
}, q = { class: "preview-content" }, x = { class: "preview-images-list" }, z = { class: "view" }, G = { class: "preview-delete-icon" }, J = ["src"], K = ["src"], Q = { class: "tip" }, W = {
  key: 1,
  class: "h-upload-file"
}, X = { class: "h-upload-content" }, Y = /* @__PURE__ */ t("div", { class: "h-upload-text" }, [
  /* @__PURE__ */ g("\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u5904\u6216"),
  /* @__PURE__ */ t("em", null, "\u70B9\u51FB\u4E0A\u4F20")
], -1), Z = { class: "h-upload-list-content" }, ee = { class: "h-upload-list" }, te = { class: "h-upload-list_item" }, le = { class: "h-upload-list_item-name" }, se = { class: "h-upload-list_item-status-label" }, oe = {
  name: "HUpload"
}, ce = /* @__PURE__ */ N({
  ...oe,
  props: j,
  emits: ["getFilesList"],
  setup(I, { emit: D }) {
    const n = I;
    T(() => {
      !r.value || (r.value.addEventListener(
        "drop",
        (e) => {
          e.preventDefault(), e.dataTransfer.files && (w(e.dataTransfer.files), u.value.push(...Array.from(e.dataTransfer.files)));
        },
        !1
      ), r.value.addEventListener(
        "dragover",
        (e) => {
          e.preventDefault();
        },
        !1
      ));
    });
    const k = i(), r = i(), u = i([]), d = i([]);
    i(!1);
    const m = i(!1), C = i();
    i("");
    const _ = () => k.value.click(), A = (e) => {
      let l = e.target.files;
      !l || (w(l), u.value.push(...Array.from(l)), D("getFilesList", u.value));
    }, U = (e) => {
      u.value.splice(e, 1);
    }, w = (e) => {
      for (let l = 0; l < e.length; l++)
        d.value.push({
          url: URL.createObjectURL(e[l])
        });
    }, $ = (e) => {
      m.value = !0, C.value = d.value[e].url;
    }, V = (e) => {
      d.value.splice(e, 1);
    };
    return (e, l) => {
      const c = F("h-icon"), b = F("h-modal2");
      return s(), o("div", H, [
        M(t("input", {
          ref_key: "hIpt",
          ref: k,
          type: "file",
          onChange: A,
          multiple: n.multiple,
          accept: n.accept
        }, null, 40, O), [
          [S, !1]
        ]),
        n.type === "image" && !e.drag ? (s(), o("div", P, [
          t("div", q, [
            t("ul", x, [
              (s(!0), o(y, null, E(d.value, (h, p) => (s(), o("li", null, [
                t("div", z, [
                  t("span", G, [
                    a(c, {
                      name: "view",
                      onClick: (v) => $(p),
                      class: "preview-icon"
                    }, null, 8, ["onClick"]),
                    a(c, {
                      name: "delete",
                      onClick: (v) => V(p),
                      class: "deletecon"
                    }, null, 8, ["onClick"])
                  ]),
                  t("img", {
                    src: h.url,
                    alt: ""
                  }, null, 8, J)
                ]),
                a(b, {
                  show: m.value,
                  "onUpdate:show": l[0] || (l[0] = (v) => m.value = v)
                }, {
                  header: L(() => [
                    g(" \u67E5\u770B\u56FE\u7247 ")
                  ]),
                  body: L(() => [
                    t("img", {
                      src: C.value,
                      alt: "\u65E0\u6CD5\u83B7\u53D6\u56FE\u7247\u4FE1\u606F",
                      class: "modalImg"
                    }, null, 8, K)
                  ]),
                  _: 1
                }, 8, ["show"])
              ]))), 256)),
              t("div", {
                class: "upload-area",
                onClick: _
              }, [
                t("div", null, [
                  f(e.$slots, "uploadIcon", {}, () => [
                    a(c, {
                      name: "view",
                      class: "plusIcon"
                    })
                  ])
                ]),
                t("div", Q, [
                  f(e.$slots, "tip", {}, () => [
                    g("\u70B9\u51FB\u4E0A\u4F20")
                  ])
                ])
              ])
            ])
          ])
        ])) : B("", !0),
        n.type === "file" ? (s(), o("div", W, [
          n.drag ? (s(), o("div", {
            key: 1,
            class: "h-upload-dragger",
            ref_key: "fileArea",
            ref: r,
            onClick: _
          }, [
            t("div", X, [
              a(c, {
                name: "delete-solid",
                class: "h-upload-icon"
              }),
              Y
            ])
          ], 512)) : (s(), o("div", {
            key: 0,
            onClick: _
          }, [
            f(e.$slots, "default")
          ])),
          t("div", Z, [
            t("div", ee, [
              (s(!0), o(y, null, E(u.value, (h, p) => (s(), o("div", te, [
                t("div", le, R(h.name), 1),
                t("div", se, [
                  a(c, {
                    name: "delete-solid",
                    onClick: (v) => U(p)
                  }, null, 8, ["onClick"])
                ])
              ]))), 256))
            ])
          ])
        ])) : B("", !0)
      ]);
    };
  }
});
export {
  ce as default
};
