import { inject as d, getCurrentInstance as j, ref as n, onMounted as A, reactive as E, onUnmounted as H, unref as K } from "vue";
import { carouselContextKey as L } from "../../carousel/src/carousel2.mjs";
const T = (k, I) => {
  const r = d(L), u = j();
  r || console.error(I, "usage: <h-carousel><h-carousel-item></h-carousel-item></h-carousel>"), u || console.error(I, "compositional hook can only be invoked inside setups");
  const p = n(!1), l = n(0), v = n(1), i = n(!1), f = n(!1), C = n(!1), m = n(!1), { isVertical: g } = r;
  function y(t, e, o) {
    const s = o - 1, c = e - 1, h = e + 1, a = o / 2;
    return e === 0 && t === s ? -1 : e === s && t === 0 ? o : t < c && e - t >= a ? o + 1 : t > h && t - e >= a ? -2 : t;
  }
  function b(t, e, o) {
    const s = r.root.value;
    return s ? ((o ? s.offsetHeight : s.offsetWidth) || 0) * (t - e) : 0;
  }
  const N = (t, e, o) => {
    var a;
    const s = (a = r.items.value.length) != null ? a : Number.NaN, c = t === e;
    o !== void 0 && (m.value = c || t === o), !c && s > 2 && r.loop && (t = y(t, e, s));
    const h = K(g);
    i.value = c, l.value = b(t, e, h), f.value = !0;
  };
  function V() {
  }
  return A(() => {
    r.addItem({
      props: k,
      states: E({
        hover: p,
        translate: l,
        scale: v,
        active: i,
        ready: f,
        inStage: C,
        animating: m
      }),
      uid: u.uid,
      translateItem: N
    });
  }), H(() => {
    r.removeItem(u.uid);
  }), {
    active: i,
    animating: m,
    hover: p,
    inStage: C,
    isVertical: g,
    translate: l,
    scale: v,
    ready: f,
    handleItemClick: V
  };
};
export {
  T as useCarouselItem
};
