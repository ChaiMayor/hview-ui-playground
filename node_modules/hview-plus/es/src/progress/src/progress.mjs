import { defineComponent as F, computed as r, resolveComponent as M, openBlock as n, createElementBlock as l, normalizeClass as w, unref as o, createElementVNode as h, normalizeStyle as p, renderSlot as b, toDisplayString as S, createCommentVNode as C, createBlock as A } from "vue";
import "../style/index.mjs";
import { isFunction as E, isString as D } from "@vue/shared";
import { progressProps as L } from "./progress2.mjs";
const O = ["aria-valuenow"], V = {
  key: 0,
  class: "h-progress-bar"
}, H = {
  key: 0,
  class: "h-progress-bar-innerText"
}, R = { viewBox: "0 0 100 100" }, U = ["d", "stroke-width"], j = ["d", "stroke", "opacity", "stroke-linecap", "stroke-width"], q = { key: 0 }, G = {
  name: "HProgress"
}, Y = /* @__PURE__ */ F({
  ...G,
  props: L,
  setup(_) {
    const t = _, f = {
      success: "#67c23a",
      error: "#f56c6c",
      warning: "#e6a23c",
      default: "#20a0ff"
    }, P = r(() => {
      const { status: e, type: s, showText: i, textInside: a } = t;
      return {
        [`h-progress--${s}`]: s,
        [`h-progress--${e}`]: e,
        ["h-progress-without-text"]: !i,
        ["h-progress-text-inside"]: a
      };
    }), T = r(() => ({
      width: `${t.percentage}%`,
      animationDuration: `${t.duration}s`,
      backgroundColor: $(t.percentage)
    })), d = r(() => (t.strokeWidth / t.width * 100).toFixed(1)), k = r(() => ["circle", "dashboard"].includes(t.type) ? Number.parseInt(`${50 - Number.parseFloat(d.value) / 2}`, 10) : 0), m = r(() => {
      const e = k.value, s = t.type === "dashboard";
      return `
          M 50 50
          m 0 ${s ? "" : "-"}${e}
          a ${e} ${e} 0 1 1 0 ${s ? "-" : ""}${e * 2}
          a ${e} ${e} 0 1 1 0 ${s ? "" : "-"}${e * 2}
          `;
    }), u = r(() => 2 * Math.PI * k.value), g = r(() => t.type === "dashboard" ? 0.75 : 1), y = r(() => `${-1 * u.value * (1 - g.value) / 2}px`), x = r(() => ({
      strokeDasharray: `${u.value * g.value}px, ${u.value}px`,
      strokeDashoffset: y.value
    })), I = r(() => ({
      strokeDasharray: `${u.value * g.value * (t.percentage / 100)}px, ${u.value}px`,
      strokeDashoffset: y.value,
      transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s"
    })), z = r(() => {
      let e;
      return t.color ? e = $(t.percentage) : e = f[t.status] || f.default, e;
    }), B = r(() => t.status === "warning" ? "warning" : t.status === "success" ? "success" : "close"), N = r(() => t.type === "line" ? 12 + t.strokeWidth * 0.4 : t.width * 0.111111 + 2), v = r(() => t.format(t.percentage));
    function W(e) {
      const s = 100 / e.length;
      return e.map((a, c) => D(a) ? {
        color: a,
        percentage: (c + 1) * s
      } : a).sort((a, c) => a.percentage - c.percentage);
    }
    const $ = (e) => {
      var i;
      const { color: s } = t;
      if (E(s))
        return s(e);
      if (D(s))
        return s;
      {
        const a = W(s);
        for (const c of a)
          if (c.percentage > e)
            return c.color;
        return (i = a[a.length - 1]) == null ? void 0 : i.color;
      }
    };
    return (e, s) => {
      const i = M("h-icon");
      return n(), l("div", {
        class: w(["h-progress", o(P)]),
        role: "progressbar",
        "aria-valuenow": e.percentage,
        "aria-valuemin": "0",
        "aria-valuemax": "100"
      }, [
        e.type === "line" ? (n(), l("div", V, [
          h("div", {
            class: "h-progress-bar-outer",
            style: p({ height: `${e.strokeWidth}px` })
          }, [
            h("div", {
              class: w(["h-progress-bar-inner", { ["h-progress-bar-innerindeterminate"]: e.indeterminate }]),
              style: p(o(T))
            }, [
              (e.showText || e.$slots.default) && e.textInside ? (n(), l("div", H, [
                b(e.$slots, "default", { percentage: e.percentage }, () => [
                  h("span", null, S(o(v)), 1)
                ])
              ])) : C("", !0)
            ], 6)
          ], 4)
        ])) : (n(), l("div", {
          key: 1,
          class: "h-progress-circle",
          style: p({ height: `${e.width}px`, width: `${e.width}px` })
        }, [
          (n(), l("svg", R, [
            h("path", {
              class: "h-progress-circle-track",
              d: o(m),
              stroke: "#e5e9f2",
              "stroke-width": o(d),
              fill: "none",
              style: p(o(x))
            }, null, 12, U),
            h("path", {
              class: "h-progress-circle-path",
              d: o(m),
              stroke: o(z),
              fill: "none",
              opacity: e.percentage ? 1 : 0,
              "stroke-linecap": e.strokeLinecap,
              "stroke-width": o(d),
              style: p(o(I))
            }, null, 12, j)
          ]))
        ], 4)),
        (e.showText || e.$slots.default) && !e.textInside ? (n(), l("div", {
          key: 2,
          class: "h-progress-text",
          style: p({ fontSize: `${o(N)}px` })
        }, [
          b(e.$slots, "default", { percentage: e.percentage }, () => [
            e.status ? (n(), A(i, {
              key: 1,
              name: o(B)
            }, null, 8, ["name"])) : (n(), l("span", q, S(o(v)), 1))
          ])
        ], 4)) : C("", !0)
      ], 10, O);
    };
  }
});
export {
  Y as default
};
