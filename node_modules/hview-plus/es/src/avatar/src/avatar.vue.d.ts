import type { CSSProperties } from "vue";
declare const _sfc_main: import("vue").DefineComponent<{
    size: {
        type: (StringConstructor | NumberConstructor)[];
        values: string[];
        default: string;
    };
    shape: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    border: {
        type: StringConstructor;
        value: string[];
        default: string;
    };
    icon: {
        type: StringConstructor;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    srcSet: StringConstructor;
    alt: StringConstructor;
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: string;
    };
}, {
    props: any;
    emit: (event: "error", evt: Event) => void;
    hasLoadError: import("vue").Ref<boolean>;
    styleClass: import("vue").ComputedRef<{
        [x: string]: string | boolean;
    }>;
    sizeStyle: import("vue").ComputedRef<CSSProperties>;
    fitStyle: import("vue").ComputedRef<CSSProperties>;
    handleError: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    error: (evt: Event) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: (StringConstructor | NumberConstructor)[];
        values: string[];
        default: string;
    };
    shape: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    border: {
        type: StringConstructor;
        value: string[];
        default: string;
    };
    icon: {
        type: StringConstructor;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    srcSet: StringConstructor;
    alt: StringConstructor;
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: string;
    };
}>> & {
    onError?: (evt: Event) => any;
}, {
    size: string | number;
    shape: string;
    border: string;
    src: string;
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
}>;
export default _sfc_main;
