import { defineComponent as _, ref as p, watch as N, onMounted as B, provide as o, openBlock as s, createElementBlock as g, Fragment as O, renderList as F, createBlock as T } from "vue";
import "../style/index.mjs";
import A from "./treeNode.mjs";
import { deepCopy as D } from "@hview-plus/utils";
import { TreeProps as H } from "./tree2.mjs";
const L = { class: "h-tree" }, M = {
  name: "HTree"
}, G = /* @__PURE__ */ _({
  ...M,
  props: H,
  emits: ["toggle-change", "checked-change"],
  setup(C, { expose: b, emit: t }) {
    const l = C, a = p([]), i = p(l.defaultCheckedKeys);
    N(
      () => l.data,
      (n) => {
        console.log(n);
      },
      { immediate: !0 }
    ), B(() => {
      k(D(l.data));
    });
    const k = (n) => {
      a.value = n.map((e) => (e.children = e[l.children] || [], e.label = e[l.label], e.id = e[l.nodeKey], e.isOpen = !1, e.isChecked = !1, e.children && e.children.length && k(e.children), {
        id: e.id,
        label: e.label,
        children: e.children,
        isOpen: e.isOpen,
        isChecked: e.isChecked,
        disabled: e.disabled
      }));
    }, y = () => {
      f(a.value);
    }, v = (n) => {
      t("toggle-change", n);
    }, x = (n) => {
      const e = r();
      t("checked-change", e, n);
    }, f = (n) => {
      n.forEach((e) => {
        let d, c, h;
        if (e.children && e.children.length) {
          f(e.children);
          const u = e.children;
          h = u.filter((E) => E.isChecked), h.length === 0 ? (d = !1, c = !1) : h.length === u.length ? (d = !0, c = !1) : (d = !1, c = !0), e.isChecked = d, e.indeterminate = c;
        }
      });
    }, K = (n) => {
      !l.showCheckbox || (i.value = n);
    }, w = () => r().map((n) => n.id), r = () => {
      const n = [], e = function(d) {
        d.forEach((c) => {
          c.isChecked && n.push({
            id: c.id,
            label: c.label,
            children: c.children ? c.children : []
          }), c.children && c.children.length && e(c.children);
        });
      };
      return e(a.value), n;
    };
    return o("checkboxChange", y), o("toggle-change", v), o("checked-change", x), b({
      setCheckedKeys: K,
      getCheckedKeys: w,
      getCheckedNodes: r
    }), (n, e) => (s(), g("div", L, [
      (s(!0), g(O, null, F(a.value, (d, c) => (s(), T(A, {
        key: c,
        items: d,
        label: n.label,
        children: n.children,
        "show-checkbox": n.showCheckbox,
        index: 0,
        "node-key": n.nodeKey,
        "default-expanded-keys": n.defaultExpandedKeys,
        "default-checked-keys": i.value,
        "default-expand-all": n.defaultExpandAll,
        "render-content": n.renderContent,
        "parent-data": a.value
      }, null, 8, ["items", "label", "children", "show-checkbox", "node-key", "default-expanded-keys", "default-checked-keys", "default-expand-all", "render-content", "parent-data"]))), 128))
    ]));
  }
});
export {
  G as default
};
