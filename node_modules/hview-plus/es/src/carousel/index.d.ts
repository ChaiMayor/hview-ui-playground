declare const Carousel: import("@hview-plus/utils").SFCWithInstall<import("vue").DefineComponent<{
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    indicatorPosition: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicatorType: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    arrow: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    direction: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    pauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    props: any;
    emit: (event: "change", current: number, prev: number) => void;
    root: import("vue").Ref<HTMLDivElement>;
    activeIndex: import("vue").Ref<number>;
    arrowDisplay: import("vue").ComputedRef<boolean>;
    hasLabel: import("vue").ComputedRef<boolean>;
    hover: import("vue").Ref<boolean>;
    items: import("vue").ShallowRef<import("./src/carousel").CarouselItemContext[]>;
    handleButtonEnter: (arrow: "left" | "right") => void;
    handleButtonLeave: () => void;
    handleIndicatorClick: (index: number) => void;
    handleMouseEnter: () => void;
    handleMouseLeave: () => void;
    setActiveItem: (index: string | number) => void;
    prev: () => void;
    next: () => void;
    throttledArrowClick: (index: number) => void;
    throttledIndicatorHover: (index: number) => void;
    carouselClasses: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
    indicatorsClasses: import("vue").ComputedRef<{
        [x: string]: string | boolean;
        "h-carousel-indicators-labels": boolean;
        "h-carousel-indicators-outside": boolean;
    }>;
    indicatorClasses: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (current: number, prev: number) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    indicatorPosition: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicatorType: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    arrow: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    direction: {
        type: StringConstructor;
        values: string[];
        default: string;
    };
    pauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onChange?: (current: number, prev: number) => any;
}, {
    direction: string;
    height: string;
    initialIndex: number;
    trigger: string;
    autoplay: boolean;
    interval: number;
    indicatorPosition: string;
    indicator: boolean;
    indicatorType: string;
    arrow: string;
    loop: boolean;
    pauseOnHover: boolean;
}>>;
export default Carousel;
