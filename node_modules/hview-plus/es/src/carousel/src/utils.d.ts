import type { ComponentInternalInstance, VNode } from "vue";
import type { VNodeChild, VNodeNormalizedChildren } from "vue";
import type { SetupContext } from "vue";
import { CarouselItemContext } from "./carousel";
import type { CarouselEmits, CarouselProps } from "./carousel";
export declare type RawSlots = Exclude<VNodeNormalizedChildren, Array<any>>;
export declare type VNodeChildAtom = Exclude<VNodeChild, Array<any>>;
export declare type FlattenVNodes = Array<VNodeChildAtom | RawSlots>;
export declare const flattedChildren: (children: FlattenVNodes | VNode | VNodeNormalizedChildren) => FlattenVNodes;
export declare const useOrderedChildren: <T extends {
    uid: number;
}>(vm: ComponentInternalInstance, childComponentName: string) => {
    children: import("vue").ShallowRef<T[]>;
    addChild: (child: T) => void;
    removeChild: (uid: number) => void;
};
export declare const useCarousel: (props: CarouselProps, emit: SetupContext<CarouselEmits>["emit"], componentName: string) => {
    root: import("vue").Ref<HTMLDivElement>;
    activeIndex: import("vue").Ref<number>;
    arrowDisplay: import("vue").ComputedRef<boolean>;
    hasLabel: import("vue").ComputedRef<boolean>;
    hover: import("vue").Ref<boolean>;
    items: import("vue").ShallowRef<CarouselItemContext[]>;
    handleButtonEnter: (arrow: "left" | "right") => void;
    handleButtonLeave: () => void;
    handleIndicatorClick: (index: number) => void;
    handleMouseEnter: () => void;
    handleMouseLeave: () => void;
    setActiveItem: (index: number | string) => void;
    prev: () => void;
    next: () => void;
    throttledArrowClick: (index: number) => void;
    throttledIndicatorHover: (index: number) => void;
};
